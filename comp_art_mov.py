""" 
This code generates random art by compositing three images, one for each color channel. 
Each of these images is generated by a set of random functions. 
This code uses Pillow of the Python Imaging Library
@author: Apurva Raman
    apurvaraman@github.com
"""

import random
import math
from PIL import Image


def build_random_function(min_depth, max_depth):
    """ Builds a random function of depth at least min_depth and depth
        at most max_depth (see assignment writeup for definition of depth
        in this context)
        min_depth: the minimum depth of the random function
        max_depth: the maximum depth of the random function
        returns: the randomly generated function represented as a nested list
                 (see assignment writeup for details on the representation of
                 these functions)
    """

    """
    Old Approach
    randomForDepth = random.randint(min_depth, max_depth)
    noArgument = ["x", "y"] 
    oneArgument = ["sin_pi", "cos_pi", "sqr", "sqrt", "abs"]
    twoArgument = ["prod", "avg"]
    allFunctions = ["sin_pi", "cos_pi", "prod", "avg"]
    fun = []

    if randomForDepth <= 0:
        fun.append(random.choice(noArgument))
        return fun

    else:
        f = random.choice(allFunctions)
        fun.append(f)
        if(f in twoArgument):
            fun.append(build_random_function(min_depth - 1, max_depth - 1))
            fun.append(build_random_function(min_depth - 1, max_depth - 1))
        else: 
            fun.append(build_random_function(min_depth - 1, max_depth - 1))

        return fun

    """

    #Lambda functions!
    x = lambda x,y,t: x
    y = lambda x,y,t: y
    cos_pi = lambda x: math.cos(math.pi * x)
    sin_pi = lambda x: math.sin(math.pi * x)
    sqr = lambda x: x ** 2
    prod = lambda x,y,t: x * y
    avg = lambda x,y,t: .5 * (x + y)
    time = lambda x,y,t: t

    allFunctions = [cos_pi, sin_pi, prod, avg, sqr, time]
    myFunction = random.choice(allFunctions)

    randomForDepth = random.randint(min_depth-1, max_depth-1)

    if randomForDepth <=0:
        # base case randomly pick a single argument function for no depth
        oneArgument = [x(x,y,time), y(x,y,time), time(x,y,time)]
        return random.choice(oneArgument)
        
    elif myFunction in [prod, avg, x, y, time]:
        #build two functions for two argument lambda functions
        func1 = build_random_function(min_depth-1, max_depth-1)
        func2 = build_random_function(min_depth-1, max_depth-1)
        return lambda x,y,t: myFunction(func1(x,y,t), func2(x,y,t), time(x,y,t))

    else:
        #build one function to match the single argument lambda functions
        func1 = build_random_function(min_depth-1, max_depth-1)
        return lambda x,y,t: myFunction(func1(x,y,t))
      

def remap_interval(val,
                   input_interval_start,
                   input_interval_end,
                   output_interval_start,
                   output_interval_end):
    """ Given an input value in the interval [input_interval_start,
        input_interval_end], return an output value scaled to fall within
        the output interval [output_interval_start, output_interval_end].
        val: the value to remap
        input_interval_start: the start of the interval that contains all
                              possible values for val
        input_interval_end: the end of the interval that contains all possible
                            values for val
        output_interval_start: the start of the interval that contains all
                               possible output values
        output_inteval_end: the end of the interval that contains all possible
                            output values
        returns: the value remapped from the input to the output interval
        >>> remap_interval(0.5, 0, 1, 0, 10)
        5.0
        >>> remap_interval(5, 4, 6, 0, 2)
        1.0
        >>> remap_interval(5, 4, 6, 1, 2)
        1.5
    """
    intervalLengthInput = input_interval_end - input_interval_start #finds the length of the input interval
    intervalLengthOutput = output_interval_end - output_interval_start #finds the length of the output interval
    scaledOutputValue = (intervalLengthOutput / float(intervalLengthInput)) * (val - input_interval_start) + output_interval_start
    return scaledOutputValue

def color_map(val):
    """ Maps input value between -1 and 1 to an integer 0-255, suitable for
        use as an RGB color code.
        val: value to remap, must be a float in the interval [-1, 1]
        returns: integer in the interval [0,255]
        >>> color_map(-1.0)
        0
        >>> color_map(1.0)
        255
        >>> color_map(0.0)
        127
        >>> color_map(0.5)
        191
    """
    # NOTE: This relies on remap_interval, which you must provide
    color_code = remap_interval(val, -1, 1, 0, 255)
    return int(color_code)


def test_image(filename, x_size=350, y_size=350):
    """ Generate test image with random pixels and save as an image file.
        filename: string filename for image (should be .png)
        x_size, y_size: optional args to set image dimensions (default: 350)
    """
    # Create image and loop over all pixels
    im = Image.new("RGB", (x_size, y_size))
    pixels = im.load()
    for i in range(x_size):
        for j in range(y_size):
            x = remap_interval(i, 0, x_size, -1, 1)
            y = remap_interval(j, 0, y_size, -1, 1)
            pixels[i, j] = (random.randint(0, 255),  # Red channel
                            random.randint(0, 255),  # Green channel
                            random.randint(0, 255))  # Blue channel

    im.save(filename)

def generate_art(filename, x_size=350, y_size=350):
    """ Generate computational art and save as an image file.
        filename: string filename for image (should be .png)
        x_size, y_size: optional args to set image dimensions (default: 350)
    """
    # Functions for red, green, and blue channels - where the magic happens!
    red_function = build_random_function(9,11)
    green_function = build_random_function(9,11)
    blue_function = build_random_function(9,11)

    # Create image and loop over all pixels
    im = Image.new("RGB", (x_size, y_size))
    pixels = im.load()

    for frames in range(10):
        im = Image.new("RGB", (x_size, y_size))
        pixels = im.load()
        tFrame = remap_interval(frames, 0, 10,-1,1)
        filename = "frame{}.png".format(frames)
        for i in range(x_size):
            for j in range(y_size):
                x = remap_interval(i, 0, x_size, -1, 1)
                y = remap_interval(j, 0, y_size, -1, 1)
                pixels[i, j] = (
                        color_map(red_function(x, y, tFrame)),
                        color_map(green_function(x, y, tFrame)),
                        color_map(blue_function(x, y, tFrame))
                        )

        im.save(filename)


if __name__ == '__main__':

    generate_art("myart.png")